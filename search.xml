<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式(Singleton Pattern)</title>
      <link href="/2019/07/28/singleton/"/>
      <url>/2019/07/28/singleton/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>确保一个类只有一个实例，并且自行实例化并向整个系统提供访问该实例的方法。</p><h2 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h2><img src="https://elzhao.github.io/img/singleton/singleton-1.png" width="500" height="90"><p>角色：<br>1、    Client——高层客户端；<br>2、    Singleton——单例类；</p><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="1、懒汉模式"><a href="#1、懒汉模式" class="headerlink" title="1、懒汉模式"></a>1、懒汉模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class LazySingleton &#123;</span><br><span class="line"></span><br><span class="line">private static LazySingleton mInstance;</span><br><span class="line"></span><br><span class="line">private <span class="function"><span class="title">LazySingleton</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static synchronized LazySingleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (mInstance == null) &#123;</span><br><span class="line">mInstance = new LazySingleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：只有第一次掉用getInstance()的时候才去实例化，在一定程度节约资源。<br>缺点：每次掉用getInstance()都要进行同步，造成不必要的同步开销</p><h3 id="2、饿汉模式"><a href="#2、饿汉模式" class="headerlink" title="2、饿汉模式"></a>2、饿汉模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class HungrySingleton &#123;</span><br><span class="line"></span><br><span class="line">private static HungrySingleton mInstance = new HungrySingleton();</span><br><span class="line"></span><br><span class="line">private <span class="function"><span class="title">HungrySingleton</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static HungrySingleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：类加载的时候就去实例化避免线程同步问题。<br>缺点：类加载的时候就去实例化造成资源不必要的浪费。</p><h3 id="3、双重检查单例模式"><a href="#3、双重检查单例模式" class="headerlink" title="3、双重检查单例模式"></a>3、双重检查单例模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class DclSingleton &#123;</span><br><span class="line"></span><br><span class="line">private volatile static DclSingleton mInstance;</span><br><span class="line"></span><br><span class="line">private <span class="function"><span class="title">DclSingleton</span></span>() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static DclSingleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line"><span class="keyword">if</span> (mInstance == null) &#123;</span><br><span class="line">synchronized (DclSingleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (mInstance == null) &#123;</span><br><span class="line">mInstance = new DclSingleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：只有第一次掉用getInstance()的时候才去实例化；双空检查避免了不必要的同步。<br>缺点：在高并发或低于JDK6的环境下有一定缺陷。</p><h3 id="4、静态内部类模式"><a href="#4、静态内部类模式" class="headerlink" title="4、静态内部类模式"></a>4、静态内部类模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class SicSingleton &#123;</span><br><span class="line"></span><br><span class="line">private static class SicSingletonHolder&#123;</span><br><span class="line">private static final SicSingleton INSTANCE = new SicSingleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private <span class="function"><span class="title">SicSingleton</span></span>()&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static SicSingleton <span class="function"><span class="title">getInstance</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> SicSingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：只有第一次掉用getInstance()的时候才去实例化。<br>缺点：特殊情况下失效。</p><h3 id="5、枚举单例模式"><a href="#5、枚举单例模式" class="headerlink" title="5、枚举单例模式"></a>5、枚举单例模式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public enum EnumSingleton &#123;</span><br><span class="line"></span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> getClass().getName() + <span class="string">"@"</span> + hashCode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：线程安全；避免多线程同步问题；能够通过反射、反序列化重新创建新的对象。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、在整个项目中需要一个共享访问点，如网站的计数器<br>2、创建一个对象需要消耗过多的资源，如访问IO和数据库等资源<br>3、要求生成唯一序列号的环境</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><h3 id="单例模式优点："><a href="#单例模式优点：" class="headerlink" title="单例模式优点："></a>单例模式优点：</h3><p>1、    由于单例模式在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式的优势就非常明显。<br>2、    由于单例模式只生成一个实例，所以减少了系统的性能开销，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后用永久驻留内存的方式来解决（在Java EE中采用单例模式时需要注意JVM垃圾回收机制）。<br>3、    单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作。<br>4、    单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。</p><h3 id="单例模式缺点："><a href="#单例模式缺点：" class="headerlink" title="单例模式缺点："></a>单例模式缺点：</h3><p>1、    单例模式一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。<br>2、    单例模式对测试是不利的。在并行开发环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。<br>3、    单例模式与单一职责原则有冲突。一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在以上单例模式实现中，除枚举单例模式外，其他单例模式在特殊情况下有可能被破坏：<br>1、    通过反射能够生成多个不同实例；<br>2、    如果单例类实现了java.io.Serializable接口，通过序列化反序列化可以还原出多个实例；<br>3、使用克隆生成多个不同实例；</p><p>对第1个问题，懒汉单例模式和内部类单例模式的解决办法：<br><img src="https://elzhao.github.io/img/singleton/singleton-2.png" width="500" height="90"></p><p>对第2个问题的解决办法：<br><img src="https://elzhao.github.io/img/singleton/singleton-3.png" width="500" height="90"></p><p>对第3个问题的解决方法：<br><img src="https://elzhao.github.io/img/singleton/singleton-4.png" width="500" height="90"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>设计模式(Java版)、设计模式之禅、Android源码设计模式。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/07/20/hello-world/"/>
      <url>/2019/07/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
